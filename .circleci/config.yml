version: 2.1

executors:
  docker-publisher:
    environment:
      WEBAPP_IMAGE_NAME: suldlss/dlme
      WORKER_IMAGE_NAME: suldlss/dlme-worker
    docker:
    - image: cimg/base:stable

orbs:
  browser-tools: circleci/browser-tools@1.1
  aws-cli: circleci/aws-cli@2.0.6

jobs:
  test:
    docker:
    - image: cimg/ruby:2.7.5-browsers
      environment:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        RAILS_ENV: test
        NOKOGIRI_USE_SYSTEM_LIBRARIES: true
        CC_TEST_REPORTER_ID: 0603d31c367f7e726e4db6e249d4b62025c768000d43b02259a65e8486812362
    - image: bitnami/solr:8
      environment:
        SOLR_PORT_NUMBER: 8983
        SOLR_CLOUD_BOOTSTRAP: "yes"
        SOLR_ENABLE_CLOUD_MODE: "yes"
        SOLR_ENABLE_AUTHENTICATION: "yes"
        SOLR_ADMIN_USERNAME: admin
        SOLR_ADMIN_PASSWORD: admin
        SOLR_ZK_HOSTS: localhost
    - image: bitnami/zookeeper
      environment:
        ALLOW_ANONYMOUS_LOGIN: "yes"
        JVMFLAGS: -Dzookeeper.4lw.commands.whitelist=ruok -Dzookeeper.admin.enableServer=false
        ZOO_SERVERS: zoo1:2888:3888
        ZOO_ADMIN_SERVER_PORT_NUMBER: 8020
    steps:
    - browser-tools/install-browser-tools
    # get latest curl so we can use --fail-with-body flag
    - run: sudo apt-get upgrade curl
    - checkout
    - run: |
        google-chrome --version
    # Upgrade bundler
    - run:
        name: Install Bundler
        command: gem install bundler
    # Which version of bundler?
    - run:
        name: Which bundler?
        command: bundle -v
    # Restore bundle cache
    - restore_cache:
        keys:
        - dlme-bundle-v3-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - dlme-bundle-v3-{{ arch }}-{{ .Branch }}
        - dlme-bundle-v3-
    - run:
        name: Bundle Install
        command: bundle check || bundle install
    - run: bundle clean --force
    # Store bundle cache
    - save_cache:
        key: dlme-bundle-v3-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        paths:
        - vendor/bundle
    # Only necessary if app uses webpacker or yarn in some other way
    - restore_cache:
        keys:
          - dlme-yarn-{{ checksum "yarn.lock" }}
          - dlme-yarn-
    - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
    # Store yarn / webpacker cache
    - save_cache:
        key: dlme-yarn-{{ checksum "yarn.lock" }}
        paths:
          - ~/.cache/yarn
    - run:
        name: Test prepare
        command: bin/rails db:test:prepare
    # Create a Solr collection
    - run:
        name: Load config into SolrCloud
        command: docker/configure_solrcloud.sh
    - run:
        name: Check styles using rubocop
        command: bundle exec rubocop
    - run:
        name: Setup Code Climate test-reporter
        command: |
          # download test reporter as a static binary
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
          chmod +x ./tmp/cc-test-reporter
    # Run rspec in parallel
    - run:
        name: Run rspec in parallel
        environment:
          SOLR_URL: http://admin:admin@localhost:8983/solr/dlme
        command: |
          ./tmp/cc-test-reporter before-build
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
    - run:
        name: Code Climate Test Coverage
        command: |
          ./tmp/cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
    - run:
        name: Upload coverage results to Code Climate
        command: |
          ./tmp/cc-test-reporter sum-coverage coverage/codeclimate.*.json -p 1 -o coverage/codeclimate.total.json
          ./tmp/cc-test-reporter upload-coverage -i coverage/codeclimate.total.json
    # Save test results for timing analysis
    - store_test_results:
        path: test_results

  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 20.10.11
    - run:
        name: Build Docker image
        command: |
          docker build . -f docker/Dockerfile -t $WEBAPP_IMAGE_NAME:latest --build-arg GIT_INFO=$(git describe --tags) --target webapp-prod
          docker build . -f docker/Dockerfile -t $WORKER_IMAGE_NAME:latest --build-arg GIT_INFO=$(git describe --tags) --target worker-prod
          docker build . -f docker/Dockerfile -t e2e --build-arg GIT_INFO=$(git describe --tags) --target webapp-test
    - run:
        name: Archive Docker image
        command: |
          docker save -o webapp_image.tar $WEBAPP_IMAGE_NAME
          docker save -o worker_image.tar $WORKER_IMAGE_NAME
          docker save -o e2e_image.tar e2e

    - persist_to_workspace:
        root: .
        paths:
        - ./webapp_image.tar
        - ./worker_image.tar
        - ./e2e_image.tar

  test-image:
    executor: docker-publisher
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker:
        version: 20.10.11
    - run:
        name: Load archived Docker images
        command: |
          docker load -i /tmp/workspace/webapp_image.tar
          docker load -i /tmp/workspace/worker_image.tar
          docker load -i /tmp/workspace/e2e_image.tar
    - run:
        name: Create local Docker stack
        command: docker compose -f .circleci/docker-compose.yml up --quiet-pull --no-start
    - run:
        name: Prepare postgres database
        command: docker compose -f .circleci/docker-compose.yml run --rm app bin/rails db:prepare
    - run:
        name: Start local Docker stack
        command: docker compose -f .circleci/docker-compose.yml up --detach
    - run:
        name: Prepare SolrCloud collection
        command: docker compose -f .circleci/docker-compose.yml exec app docker/configure_solrcloud.sh solr
    - run:
        name: Create test spotlight exhibit from fixture
        command: docker compose -f .circleci/docker-compose.yml exec --env FILE=spec/fixtures/json/library-export.json app rake spotlight:import\[library\]
    - run:
        name: Load sample data from fixture
        command: docker compose -f .circleci/docker-compose.yml exec app rake resources:import\[spec/fixtures/ndjson/sample.ndjson\]
    - run:
        name: Run integration tests against Docker stack
        command: docker run --rm --env CAPYBARA_APP_HOST=app --env CAPYBARA_APP_PORT=3000 --network circleci_default e2e rspec --pattern e2e/**/*_spec.rb

  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker:
        version: 20.10.11
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/webapp_image.tar
          docker load -i /tmp/workspace/worker_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $WEBAPP_IMAGE_NAME:latest $WEBAPP_IMAGE_NAME:$CIRCLE_SHA1
          docker tag $WORKER_IMAGE_NAME:latest $WORKER_IMAGE_NAME:$CIRCLE_SHA1
          docker push $WEBAPP_IMAGE_NAME:latest
          docker push $WORKER_IMAGE_NAME:latest
          docker push $WEBAPP_IMAGE_NAME:$CIRCLE_SHA1
          docker push $WORKER_IMAGE_NAME:$CIRCLE_SHA1

  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker:
        version: 20.10.11
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/webapp_image.tar
          docker load -i /tmp/workspace/worker_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $WEBAPP_IMAGE_NAME:latest $WEBAPP_IMAGE_NAME:$CIRCLE_TAG
          docker tag $WEBAPP_IMAGE_NAME:latest $WEBAPP_IMAGE_NAME:release
          docker tag $WORKER_IMAGE_NAME:latest $WORKER_IMAGE_NAME:$CIRCLE_TAG
          docker tag $WORKER_IMAGE_NAME:latest $WORKER_IMAGE_NAME:release
          docker push $WEBAPP_IMAGE_NAME:$CIRCLE_TAG
          docker push $WEBAPP_IMAGE_NAME:release
          docker push $WORKER_IMAGE_NAME:$CIRCLE_TAG
          docker push $WORKER_IMAGE_NAME:release

  update_ecs_dev:
    executor: aws-cli/default
    environment:
      DLME_DEPLOY_REGION: us-west-2
    steps:
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: DLME_DEPLOY_REGION
          profile-name: dlme
      - assume_role:
          role_arn: DEV_ROLE_ARN
          source-profile: dlme
      - update_ecs:
          ecs_cluster_name: ":cluster/dlme-dev"

  update_ecs_uat:
    executor: aws-cli/default
    environment:
      DLME_DEPLOY_REGION: us-west-2
    steps:
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: DLME_DEPLOY_REGION
          profile-name: dlme
      - assume_role:
          role_arn: STAGE_ROLE_ARN
          source-profile: dlme
      - update_ecs:
          ecs_cluster_name: ":cluster/dlme-uat"
          webapp_service: spotlight-uat
          worker_service: dlme-uat-worker

  update_ecs_stage:
    executor: aws-cli/default
    environment:
      DLME_DEPLOY_REGION: us-west-2
    steps:
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: DLME_DEPLOY_REGION
          profile-name: dlme
      - assume_role:
          role_arn: STAGE_ROLE_ARN
          source-profile: dlme
      - update_ecs:
          ecs_cluster_name: "arn:aws:ecs:us-west-2:[0-9]+:cluster/dlme$"

  update_ecs_prod:
    executor: aws-cli/default
    environment:
      DLME_DEPLOY_REGION: us-west-2
    steps:
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: DLME_DEPLOY_REGION
          profile-name: dlme
      - assume_role:
          role_arn: PROD_ROLE_ARN
          source-profile: dlme
      - update_ecs:
          ecs_cluster_name: ":cluster/dlme"

commands:
  # Use our own assume_role implementation because the upstream support in aws-cli
  # does not let you configure the source_profile
  assume_role:
    description: "Assume an AWS Role"
    parameters:
      source-profile:
        type: string
        default: dlme
      profile:
        type: string
        default: default
      role_arn:
        type: env_var_name
    steps:
      - run:
          name: Assume the given role
          environment:
            PARAM_AWS_PROFILE: << parameters.profile >>
            PARAM_AWS_ROLE_ARN: << parameters.role_arn >>
            PARAM_AWS_SOURCE_PROFILE: << parameters.source-profile >>
          command: |
            PARAM_AWS_ROLE_ARN=$(eval echo "\$$PARAM_AWS_ROLE_ARN")
            aws configure set role_arn "$PARAM_AWS_ROLE_ARN" --profile $PARAM_AWS_PROFILE
            aws configure set source_profile "$PARAM_AWS_SOURCE_PROFILE" --profile $PARAM_AWS_PROFILE

            aws configure set output json
            aws configure list # Show confirmation of config

  update_ecs:
    description: "Trigger an ECS service update"
    parameters:
      ecs_cluster_name:
        type: string
      webapp_service:
        type: string
        default: spotlight
      worker_service:
        type: string
        default: dlme-worker
    steps:
      - run:
          name: Update the webapp
          command: |
            # identify the cluster we want to update
            cluster_arn=$(aws ecs list-clusters | jq --raw-output --exit-status '.clusterArns[] | select(test("<< parameters.ecs_cluster_name >>"))')
            # update the webapp
            task_arn=$(aws ecs list-task-definitions --family-prefix << parameters.webapp_service >> --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
            aws ecs update-service --service << parameters.webapp_service >> --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
      - run:
          name: Update the worker
          command: |
            # identify the cluster we want to update
            cluster_arn=$(aws ecs list-clusters | jq --raw-output --exit-status '.clusterArns[] | select(test("<< parameters.ecs_cluster_name >>"))')
            # update the workers
            worker_task_arn=$(aws ecs list-task-definitions --family-prefix << parameters.worker_service >> --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
            aws ecs update-service --service << parameters.worker_service >> --cluster $cluster_arn --task-definition $worker_task_arn --force-new-deployment

workflows:
  version: 2

  test:
    jobs:
    - test:
        filters:
          branches:
            ignore: main
    - build-image:
        filters:
          branches:
            ignore: main
    - test-image:
        requires:
        - build-image
        filters:
          branches:
            ignore: main 

  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: main
    - publish-latest:
        requires:
        - build-image
        filters:
          branches:
            only: main
    - update_ecs_dev:
        requires:
        - publish-latest
        filters:
          branches:
            only: main
    - update_ecs_uat:
        requires:
        - publish-latest
        filters:
          branches:
            only: main

  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
        - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - update_ecs_stage:
        requires:
        - publish-tag
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - update_ecs_prod:
        requires:
        - publish-tag
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
