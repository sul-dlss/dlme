version: 2.1
executors:
  docker-publisher:
    environment:
      WEBAPP_IMAGE_NAME: suldlss/dlme
      WORKER_IMAGE_NAME: suldlss/dlme-worker
    docker:
    - image: circleci/buildpack-deps:stretch
jobs:
  test:
    docker:
    - image: circleci/ruby:2.5.3-stretch-node
      environment:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        RAILS_ENV: test
        NOKOGIRI_USE_SYSTEM_LIBRARIES: true
    - image: solr:7
      command: bin/solr -cloud -noprompt -f -p 8983
    steps:
    - checkout

    # Upgrade bundler
    - run:
        name: Install Bundler
        command: gem install bundler

    # Which version of bundler?
    - run:
        name: Which bundler?
        command: bundle -v

    # Restore bundle cache
    - restore_cache:
        keys:
        - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
        - rails-demo-bundle-v2-

    - run:
        name: Bundle Install
        command: bundle check || bundle install

    # Store bundle cache
    - save_cache:
        key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
        paths:
        - vendor/bundle

    - run:
        name: Test prepare
        command: bin/rails db:test:prepare

    # Create a Solr collection
    - run:
        name: Load config into SolrCloud
        command: |
          cd solr/config
          zip -1 -r solr_config.zip ./*
          curl -H "Content-type:application/octet-stream" --data-binary @solr_config.zip "http://localhost:8983/solr/admin/configs?action=UPLOAD&name=dlme"
          curl -H 'Content-type: application/json' http://localhost:8983/api/collections/ -d '{create: {name: dlme, config: dlme, numShards: 1}}'

    - run:
        name: Check styles using rubocop
        command: bundle exec rubocop

    # Run rspec in parallel
    - run:
        name: Run rspec in parallel
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


    # Save test results for timing analysis
    - store_test_results:
        path: test_results

  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          docker build . -f docker/Dockerfile -t $WEBAPP_IMAGE_NAME:latest .  --build-arg SECRET_KEY_BASE=$MASTER_KEY
          docker build . -f docker/Dockerfile.worker -t $WORKER_IMAGE_NAME:latest .
    - run:
        name: Archive Docker image
        command: |
          docker save -o webapp_image.tar $WEBAPP_IMAGE_NAME
          docker save -o worker_image.tar $WORKER_IMAGE_NAME
    - persist_to_workspace:
        root: .
        paths:
        - ./webapp_image.tar
        - ./worker_image.tar
  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/webapp_image.tar
          docker load -i /tmp/workspace/worker_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push $WEBAPP_IMAGE_NAME:latest
          docker push $WORKER_IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/webapp_image.tar
          docker load -i /tmp/workspace/worker_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $WEBAPP_IMAGE_NAME:latest $WEBAPP_IMAGE_NAME:$CIRCLE_TAG
          docker tag $WORKER_IMAGE_NAME:latest $WORKER_IMAGE_NAME:$CIRCLE_TAG

          docker push $WEBAPP_IMAGE_NAME:$CIRCLE_TAG
          docker push $WORKER_IMAGE_NAME:$CIRCLE_TAG
workflows:
  version: 2

  test:
    jobs:
    - test:
        filters:
          branches:
            ignore: master
  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: versioned_images
    - publish-latest:
        requires:
        - build-image
        filters:
          branches:
            only: versioned_images
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
        - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/